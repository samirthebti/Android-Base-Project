buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'com.google.gms:google-services:2.1.0-alpha3'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'io.fabric.tools:gradle:1.21.5'
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    }
}

apply plugin: 'com.android.application'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'
//apply plugin: 'io.fabric' // TODO: uncomment when having set the Fabric API key
apply plugin: 'me.tatarka.retrolambda'

repositories {
    flatDir {
        dirs 'libs'
    }
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'
    defaultConfig {
        applicationId 'com.xmartlabs.template'
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName '0.1.0'
    }
    signingConfigs {
        debug {
            def debugKeyStore = file('debug.keystore')
            if (debugKeyStore.exists()) {
                storeFile debugKeyStore
            } else {
                //noinspection GrUnresolvedAccess
                logger.error('Debug keystore file not found')
            }
        }
        release {
            def releaseKeyStore = file('release.keystore')
            if (releaseKeyStore.exists()) {
                storeFile releaseKeyStore
            } else {
                //noinspection GrUnresolvedAccess
                logger.error('Release keystore file not found')
            }
        }

        def Properties properties = new Properties()
        def propertiesFile = file('keystore.properties')
        if (propertiesFile.exists()) {
            properties.load(new FileInputStream(propertiesFile))
            //noinspection GrUnresolvedAccess
            storePassword properties['store_password']
            //noinspection GrUnresolvedAccess
            keyAlias properties['key_alias']
            //noinspection GrUnresolvedAccess
            keyPassword properties['key_password']
        } else {
            //noinspection GrUnresolvedAccess
            logger.error('Keystore properties file not found')
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            //noinspection GrUnresolvedAccess
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        //noinspection GroovyMissingReturnStatement
        production {

        }
        staging {
            applicationIdSuffix '.staging'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //noinspection GroovyMissingReturnStatement
    lintOptions {
        disable 'InvalidPackage'
    }
    packagingOptions {
        exclude '.readme'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.5.4'
    androidTestCompile 'org.mockito:mockito-core:2.0.44-beta'
    apt 'com.f2prateek.dart:dart-processor:2.0.0'
    apt 'com.f2prateek.dart:henson-processor:2.0.0'
    apt "com.github.Raizlabs.DBFlow:dbflow-processor:3.0.0-beta5"
    apt 'com.github.tbroyer.bullet:bullet-compiler:e5044b53df'
    provided 'com.google.dagger:dagger-compiler:2.0.2'
    apt 'com.hannesdorfmann.fragmentargs:processor:3.0.2'
    //apt 'net.ltgt.dagger:bullet-compiler:1.0-SNAPSHOT' // Loaded from JitPack
    apt 'org.parceler:parceler:1.0.4'
    apt 'org.projectlombok:lombok:1.16.6'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:cardview-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.android.support:recyclerview-v7:23.2.0'
    compile 'com.android.support:support-v13:23.2.0'
    compile 'com.annimon:stream:1.0.8'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true
    }
    compile 'com.f2prateek.dart:dart:2.0.0'
    compile 'com.f2prateek.dart:henson:2.0.0'
    compile 'com.github.mrmike:Ok2Curl:0.2.3'
    compile "com.github.Raizlabs.DBFlow:dbflow-core:3.0.0-beta5"
    compile "com.github.Raizlabs.DBFlow:dbflow:3.0.0-beta5"
    compile 'com.github.square.picasso:picasso:8c16e8564e'
    compile 'com.github.tbroyer.bullet:bullet:e5044b53df'
    compile 'com.google.android.gms:play-services-gcm:8.4.0'
    compile 'com.google.dagger:dagger:2.0.2'
    compile 'com.hannesdorfmann.fragmentargs:annotation:3.0.2'
    compile 'com.hannesdorfmann.fragmentargs:bundler-parceler:3.0.2'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton.timber:timber:4.1.1'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'
    compile 'com.squareup.okio:okio:1.6.0'
    //compile 'com.squareup.picasso:picasso:2.5.2' // Loaded from JitPack in order to use OkHttp3
    compile 'com.squareup.retrofit2:converter-gson:2.0.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0'
    compile 'com.squareup.retrofit2:retrofit:2.0.0'
    compile 'com.trello:rxlifecycle:0.5.0'
    compile 'com.trello:rxlifecycle-components:0.5.0'
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'io.reactivex:rxandroid:1.1.0@aar'
    compile 'io.reactivex:rxjava:1.1.2'
    //compile 'net.ltgt.dagger:bullet:1.0-SNAPSHOT' // Loaded from JitPack
    compile 'org.parceler:parceler-api:1.0.4'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    provided 'org.projectlombok:lombok:1.16.8'
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
}

// Uncomment when having the google-services.json files
/*apply plugin: 'com.google.gms.google-services'

def appModuleRootFolder = '.'
def srcDir = 'src'
def googleServicesJsonFile = 'google-services.json'

task switchToStaging(type: Copy) {
    //noinspection GrUnresolvedAccess
    outputs.upToDateWhen { false }
    def flavor = 'staging'
    from "${srcDir}/$flavor/$googleServicesJsonFile"
    into "$appModuleRootFolder"
}

task switchToProduction(type: Copy) {
    //noinspection GrUnresolvedAccess
    outputs.upToDateWhen { false }
    def flavor = 'production'
    from "${srcDir}/$flavor/$googleServicesJsonFile"
    into "$appModuleRootFolder"
}

afterEvaluate {
    //noinspection GrUnresolvedAccess
    processStagingDebugGoogleServices.dependsOn switchToStaging
    //noinspection GrUnresolvedAccess
    processStagingReleaseGoogleServices.dependsOn switchToStaging
    //noinspection GrUnresolvedAccess
    processProductionDebugGoogleServices.dependsOn switchToProduction
    //noinspection GrUnresolvedAccess
    processProductionReleaseGoogleServices.dependsOn switchToProduction
}*/
